# split_apiv2
#
# This file was automatically generated by APIMATIC v2.0 (
# https://apimatic.io ).

require 'date'
module SplitApiv2
  # a person or organisation with whom you transact
  class Contact < BaseModel
    # the unique identifier for this resource
    # @return [UUID | String]
    attr_accessor :id

    # the type of resource
    # @return [String]
    attr_accessor :type

    # the email address for the contact
    # @return [String]
    attr_accessor :email

    # the name of the contact
    # @return [String]
    attr_accessor :name

    # name identifying the contact
    # @return [String]
    attr_accessor :nickname

    # can be used for custom data
    # @return [Object]
    attr_accessor :metadata

    # the date and time this contact was removed
    # @return [DateTime]
    attr_accessor :removed_at

    # the bank account associated with this contact
    # @return [BankAccount]
    attr_accessor :bank_account

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['type'] = 'type'
      @_hash['email'] = 'email'
      @_hash['name'] = 'name'
      @_hash['nickname'] = 'nickname'
      @_hash['metadata'] = 'metadata'
      @_hash['removed_at'] = 'removed_at'
      @_hash['bank_account'] = 'bank_account'
      @_hash
    end

    def initialize(id = nil,
                   type = nil,
                   email = nil,
                   name = nil,
                   nickname = nil,
                   metadata = nil,
                   removed_at = nil,
                   bank_account = nil)
      @id = id
      @type = type
      @email = email
      @name = name
      @nickname = nickname
      @metadata = metadata
      @removed_at = removed_at
      @bank_account = bank_account
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      type = hash['type']
      email = hash['email']
      name = hash['name']
      nickname = hash['nickname']
      metadata = hash['metadata']
      removed_at = APIHelper.rfc3339(hash['removed_at']) if hash['removed_at']
      bank_account = BankAccount.from_hash(hash['bank_account']) if
        hash['bank_account']

      # Create object from extracted values.
      Contact.new(id,
                  type,
                  email,
                  name,
                  nickname,
                  metadata,
                  removed_at,
                  bank_account)
    end
  end
end
