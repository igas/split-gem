# split_apiv2
#
# This file was automatically generated by APIMATIC v2.0 (
# https://apimatic.io ).

module SplitApiv2
  # Error Model.
  class Error < BaseModel
    # a unique identifier for this particular occurrence of the problem
    # @return [UUID | String]
    attr_accessor :id

    # the HTTP status code applicable to this problem
    # @return [Status2Enum]
    attr_accessor :status

    # a short, human-readable summary of the problem
    # @return [String]
    attr_accessor :title

    # a human-readable explanation specific to this occurrence of the problem
    # @return [String]
    attr_accessor :detail

    # Split-specific error code
    # @return [String]
    attr_accessor :code

    # additional help resources about this problem
    # @return [Object]
    attr_accessor :links

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['status'] = 'status'
      @_hash['title'] = 'title'
      @_hash['detail'] = 'detail'
      @_hash['code'] = 'code'
      @_hash['links'] = 'links'
      @_hash
    end

    def initialize(id = nil,
                   status = nil,
                   title = nil,
                   detail = nil,
                   code = nil,
                   links = nil)
      @id = id
      @status = status
      @title = title
      @detail = detail
      @code = code
      @links = links
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      status = hash['status']
      title = hash['title']
      detail = hash['detail']
      code = hash['code']
      links = hash['links']

      # Create object from extracted values.
      Error.new(id,
                status,
                title,
                detail,
                code,
                links)
    end
  end
end
