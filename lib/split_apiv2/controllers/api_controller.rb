# split_apiv2
#
# This file was automatically generated by APIMATIC v2.0 (
# https://apimatic.io ).

module SplitApiv2
  # APIController
  class APIController < BaseController
    @instance = APIController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # Shows a collection of transaction search items
    # @param [String] authorization Required parameter: API key
    # @param [Integer] page_limit Optional parameter: Records per page
    # @param [String] page_starting_after Optional parameter: UUID of the last
    # paged record.The next page of records will start immediately AFTER this
    # record.
    # @param [SortEnum] sort Optional parameter: Sort records
    # @return ShowsACollectionOfTransactionSearchItemsResponse response from the API call
    def get_shows_a_collection_of_transaction_search_items(authorization,
                                                           page_limit = nil,
                                                           page_starting_after = nil,
                                                           sort = nil)
      # Prepare query url.
      _path_url = '/transactions'
      _query_builder = Configuration.get_base_uri
      _query_builder << _path_url
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'page[limit]' => page_limit,
          'page[starting_after]' => page_starting_after,
          'sort' => sort
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'Authorization' => authorization,
        'Accept-Version' => 'V2'
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      CustomHeaderAuth.apply(_request)
      _context = execute_request(_request)
      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise ErrorResponseException.new(
          'Bad Request',
          _context
        )
      elsif _context.response.status_code == 401
        raise ErrorResponseException.new(
          'Unauthorised Access Token',
          _context
        )
      elsif _context.response.status_code == 403
        raise ErrorResponseException.new(
          'Forbidden',
          _context
        )
      elsif _context.response.status_code == 406
        raise ErrorResponseException.new(
          'Invalid Accept Format',
          _context
        )
      elsif _context.response.status_code == 422
        raise ErrorResponseException.new(
          'No bank accounts',
          _context
        )
      elsif _context.response.status_code == 429
        raise ErrorResponseException.new(
          'Too Many Requests',
          _context
        )
      elsif _context.response.status_code == 500
        raise ErrorResponseException.new(
          'Internal Server Error',
          _context
        )
      end
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ShowsACollectionOfTransactionSearchItemsResponse.from_hash(decoded)
    end

    # Get your own account details
    # @param [String] authorization Required parameter: API key
    # @return GetYourOwnAccountDetailsResponse response from the API call
    def get_your_own_account_details(authorization)
      # Prepare query url.
      _path_url = '/account'
      _query_builder = Configuration.get_base_uri
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'Authorization' => authorization,
        'Accept-Version' => 'V2'
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      CustomHeaderAuth.apply(_request)
      _context = execute_request(_request)
      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 401
        raise ErrorResponseException.new(
          'Unauthorised Access Token',
          _context
        )
      elsif _context.response.status_code == 406
        raise ErrorResponseException.new(
          'Invalid Accept Format',
          _context
        )
      elsif _context.response.status_code == 429
        raise ErrorResponseException.new(
          'Too Many Requests',
          _context
        )
      elsif _context.response.status_code == 500
        raise ErrorResponseException.new(
          'Internal Server Error',
          _context
        )
      end
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetYourOwnAccountDetailsResponse.from_hash(decoded)
    end

    # Remove a Contact
    # @param [String] authorization Required parameter: API key
    # @param [String] id_or_ref Required parameter: Example:
    # @return void response from the API call
    def remove_a_contact(authorization,
                         id_or_ref)
      # Prepare query url.
      _path_url = '/contacts/{id_or_ref}'
      _path_url = APIHelper.append_url_with_template_parameters(
        _path_url,
        'id_or_ref' => id_or_ref
      )
      _query_builder = Configuration.get_base_uri
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'Authorization' => authorization,
        'Accept-Version' => 'V2'
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.delete(
        _query_url,
        headers: _headers
      )
      CustomHeaderAuth.apply(_request)
      _context = execute_request(_request)
      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 401
        raise ErrorResponseException.new(
          'Unauthorised Access Token',
          _context
        )
      elsif _context.response.status_code == 403
        raise ErrorResponseException.new(
          'Forbidden',
          _context
        )
      elsif _context.response.status_code == 404
        raise ErrorResponseException.new(
          'Not Found',
          _context
        )
      elsif _context.response.status_code == 406
        raise ErrorResponseException.new(
          'Invalid Accept Format',
          _context
        )
      elsif _context.response.status_code == 429
        raise ErrorResponseException.new(
          'Too Many Requests',
          _context
        )
      elsif _context.response.status_code == 500
        raise ErrorResponseException.new(
          'Internal Server Error',
          _context
        )
      end
      validate_response(_context)
    end

    # Update a Contact
    # @param [String] authorization Required parameter: API key
    # @param [String] id_or_ref Required parameter: Example:
    # @param [Contact1] contact Optional parameter: Example:
    # @return void response from the API call
    def update_a_contact(authorization,
                         id_or_ref,
                         contact = nil)
      # Prepare query url.
      _path_url = '/contacts/{id_or_ref}'
      _path_url = APIHelper.append_url_with_template_parameters(
        _path_url,
        'id_or_ref' => id_or_ref
      )
      _query_builder = Configuration.get_base_uri
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'content-type' => 'application/json; charset=utf-8',
        'Authorization' => authorization,
        'Accept-Version' => 'V2'
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.patch(
        _query_url,
        headers: _headers,
        parameters: contact.to_json
      )
      CustomHeaderAuth.apply(_request)
      _context = execute_request(_request)
      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise ErrorResponseException.new(
          'Bad Request',
          _context
        )
      elsif _context.response.status_code == 401
        raise ErrorResponseException.new(
          'Unauthorised Access Token',
          _context
        )
      elsif _context.response.status_code == 403
        raise ErrorResponseException.new(
          'Forbidden',
          _context
        )
      elsif _context.response.status_code == 404
        raise ErrorResponseException.new(
          'Not Found',
          _context
        )
      elsif _context.response.status_code == 406
        raise ErrorResponseException.new(
          'Invalid Accept Format',
          _context
        )
      elsif _context.response.status_code == 415
        raise ErrorResponseException.new(
          'Invalid Content-Type',
          _context
        )
      elsif _context.response.status_code == 429
        raise ErrorResponseException.new(
          'Too Many Requests',
          _context
        )
      elsif _context.response.status_code == 500
        raise ErrorResponseException.new(
          'Internal Server Error',
          _context
        )
      end
      validate_response(_context)
    end

    # Get a Contact
    # @param [String] authorization Required parameter: API key
    # @param [String] id_or_ref Required parameter: Example:
    # @return GetAContactResponse response from the API call
    def get_a_contact(authorization,
                      id_or_ref)
      # Prepare query url.
      _path_url = '/contacts/{id_or_ref}'
      _path_url = APIHelper.append_url_with_template_parameters(
        _path_url,
        'id_or_ref' => id_or_ref
      )
      _query_builder = Configuration.get_base_uri
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'Authorization' => authorization,
        'Accept-Version' => 'V2'
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      CustomHeaderAuth.apply(_request)
      _context = execute_request(_request)
      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 401
        raise ErrorResponseException.new(
          'Unauthorised Access Token',
          _context
        )
      elsif _context.response.status_code == 403
        raise ErrorResponseException.new(
          'Forbidden',
          _context
        )
      elsif _context.response.status_code == 404
        raise ErrorResponseException.new(
          'Not Found',
          _context
        )
      elsif _context.response.status_code == 406
        raise ErrorResponseException.new(
          'Invalid Accept Format',
          _context
        )
      elsif _context.response.status_code == 429
        raise ErrorResponseException.new(
          'Too Many Requests',
          _context
        )
      elsif _context.response.status_code == 500
        raise ErrorResponseException.new(
          'Internal Server Error',
          _context
        )
      end
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetAContactResponse.from_hash(decoded)
    end

    # Add a Contact
    # @param [String] authorization Required parameter: API key
    # @param [Contact2] contact Optional parameter: Example:
    # @return AddAContactResponse response from the API call
    def add_a_contact(authorization,
                      contact = nil)
      # Prepare query url.
      _path_url = '/contacts'
      _query_builder = Configuration.get_base_uri
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'Authorization' => authorization,
        'Accept-Version' => 'V2'
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: contact.to_json
      )
      CustomHeaderAuth.apply(_request)
      _context = execute_request(_request)
      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise ErrorResponseException.new(
          'Validation error',
          _context
        )
      elsif _context.response.status_code == 401
        raise ErrorResponseException.new(
          'Unauthorised Access Token',
          _context
        )
      elsif _context.response.status_code == 403
        raise ErrorResponseException.new(
          'Forbidden',
          _context
        )
      elsif _context.response.status_code == 406
        raise ErrorResponseException.new(
          'Invalid Accept Format',
          _context
        )
      elsif _context.response.status_code == 415
        raise ErrorResponseException.new(
          'Invalid Content-Type',
          _context
        )
      elsif _context.response.status_code == 429
        raise ErrorResponseException.new(
          'Too Many Requests',
          _context
        )
      elsif _context.response.status_code == 500
        raise ErrorResponseException.new(
          'Internal Server Error',
          _context
        )
      end
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      AddAContactResponse.from_hash(decoded)
    end

    # List all Contacts
    # @param [String] authorization Required parameter: API key
    # @param [Integer] page_limit Optional parameter: Records per page
    # @param [String] page_starting_after Optional parameter: UUID of the last
    # paged record.The next page of records will start immediately AFTER this
    # record.
    # @param [Sort1Enum] sort Optional parameter: Sort records
    # @return ListAllContactsResponse response from the API call
    def list_all_contacts(authorization,
                          page_limit = nil,
                          page_starting_after = nil,
                          sort = nil)
      # Prepare query url.
      _path_url = '/contacts'
      _query_builder = Configuration.get_base_uri
      _query_builder << _path_url
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'page[limit]' => page_limit,
          'page[starting_after]' => page_starting_after,
          'sort' => sort
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'Authorization' => authorization,
        'Accept-Version' => 'V2'
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      CustomHeaderAuth.apply(_request)
      _context = execute_request(_request)
      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise ErrorResponseException.new(
          'Bad Request',
          _context
        )
      elsif _context.response.status_code == 401
        raise ErrorResponseException.new(
          'Unauthorised Access Token',
          _context
        )
      elsif _context.response.status_code == 403
        raise ErrorResponseException.new(
          'Forbidden',
          _context
        )
      elsif _context.response.status_code == 406
        raise ErrorResponseException.new(
          'Invalid Accept Format',
          _context
        )
      elsif _context.response.status_code == 429
        raise ErrorResponseException.new(
          'Too Many Requests',
          _context
        )
      elsif _context.response.status_code == 500
        raise ErrorResponseException.new(
          'Internal Server Error',
          _context
        )
      end
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ListAllContactsResponse.from_hash(decoded)
    end

    # Shows a collection of transaction journal items
    # @param [String] authorization Required parameter: API key
    # @param [Integer] page_limit Optional parameter: Records per page
    # @param [String] page_starting_after Optional parameter: UUID of the last
    # paged record.The next page of records will start immediately AFTER this
    # record.
    # @param [Sort2Enum] sort Optional parameter: Sort records
    # @return ShowsACollectionOfTransactionJournalItemsResponse response from the API call
    def get_shows_a_collection_of_transaction_journal_items(authorization,
                                                            page_limit = nil,
                                                            page_starting_after = nil,
                                                            sort = nil)
      # Prepare query url.
      _path_url = '/journal_entries'
      _query_builder = Configuration.get_base_uri
      _query_builder << _path_url
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'page[limit]' => page_limit,
          'page[starting_after]' => page_starting_after,
          'sort' => sort
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'Authorization' => authorization,
        'Accept-Version' => 'V2'
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      CustomHeaderAuth.apply(_request)
      _context = execute_request(_request)
      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise ErrorResponseException.new(
          'Bad Request',
          _context
        )
      elsif _context.response.status_code == 401
        raise ErrorResponseException.new(
          'Unauthorised Access Token',
          _context
        )
      elsif _context.response.status_code == 403
        raise ErrorResponseException.new(
          'Forbidden',
          _context
        )
      elsif _context.response.status_code == 406
        raise ErrorResponseException.new(
          'Invalid Accept Format',
          _context
        )
      elsif _context.response.status_code == 422
        raise ErrorResponseException.new(
          'No bank accounts',
          _context
        )
      elsif _context.response.status_code == 429
        raise ErrorResponseException.new(
          'Too Many Requests',
          _context
        )
      elsif _context.response.status_code == 500
        raise ErrorResponseException.new(
          'Internal Server Error',
          _context
        )
      end
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ShowsACollectionOfTransactionJournalItemsResponse.from_hash(decoded)
    end
  end
end
